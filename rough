// export const forgotPassword = catchAsyncErrors(async (req, res, next) => {
//   const { email } = req.body;

//   if (!email) {
//     return next(new ErrorHandler("Email is required", 400));
//   }

//   const user = await User.findOne({ email, accountVerified: true });

//   if (!user) {
//     return next(new ErrorHandler("Invalid email", 400));
//   }

//   const resetToken = user.getResetPasswordToken(); // returns raw token
//   await user.save({ validateBeforeSave: false });

//   const resetPasswordUrl = `${process.env.FRONTEND_URL}/password/reset/${resetToken}`;
//   const message = generateForgotPasswordEmailTemplate(resetPasswordUrl);

//   try {
//     await sendEmail({
//       email: user.email,
//       subject: "Bookworm Library Management System Password Recovery",
//       message,
//     });

//     res.status(200).json({
//       success: true,
//       message: `Email sent to ${user.email} successfully`,
//     });
//   } catch (error) {
//     user.resetPasswordToken = undefined;
//     user.resetPasswordExpire = undefined;
//     await user.save({ validateBeforeSave: false });

//     return next(new ErrorHandler("Failed to send email. Try again later.", 500));
//   }
// });

// export const resetPassword = catchAsyncErrors(async (req, res, next) => {
//   const { token } = req.params;
//   const { password, confirmPassword } = req.body;

//   if (!token) {
//     return next(new ErrorHandler("Token is missing from the URL", 400));
//   }

//   const resetPasswordToken = crypto.createHash("sha256").update(token).digest("hex");

//   const user = await User.findOne({
//     resetPasswordToken,
//     resetPasswordExpire: { $gt: Date.now() },
//   });

//   if (!user) {
//     return next(new ErrorHandler("Reset password token is invalid or expired", 400));
//   }

//   if (!password || !confirmPassword) {
//     return next(new ErrorHandler("Password and confirm password are required", 400));
//   }

//   if (password !== confirmPassword) {
//     return next(new ErrorHandler("Password & confirm password do not match", 400));
//   }

//   if (password.length < 8 || password.length > 16) {
//     return next(new ErrorHandler("Password must be between 8 and 16 characters", 400));
//   }

//   user.password = await bcrypt.hash(password, 10);
//   user.resetPasswordToken = undefined;
//   user.resetPasswordExpire = undefined;

//   await user.save();

//   // âœ… Send response and make sure no code runs after this
//   return sendToken(user, 200, "Password reset successfully", res);
// });
